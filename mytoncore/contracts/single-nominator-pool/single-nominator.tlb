bit$_ (## 1) = Bit;
bool_false$0 = Bool;
bool_true$1 = Bool;

left$0 {X:Type} {Y:Type} value:X = Either X Y;
right$1 {X:Type} {Y:Type} value:Y = Either X Y;

//

hm_edge#_ {n:#} {X:Type} {l:#} {m:#} label:(HmLabel ~l n)
          {n = (~m) + l} node:(HashmapNode m X) = Hashmap n X;

hmn_leaf#_ {X:Type} value:X = HashmapNode 0 X;
hmn_fork#_ {n:#} {X:Type} left:^(Hashmap n X)
           right:^(Hashmap n X) = HashmapNode (n + 1) X;

hml_short$0 {m:#} {n:#} len:(Unary ~n) {n <= m} s:(n * Bit) = HmLabel ~n m;
hml_long$10 {m:#} n:(#<= m) s:(n * Bit) = HmLabel ~n m;
hml_same$11 {m:#} v:Bit n:(#<= m) = HmLabel ~n m;

unary_zero$0 = Unary ~0;
unary_succ$1 {n:#} x:(Unary ~n) = Unary ~(n + 1);

hme_empty$0 {n:#} {X:Type} = HashmapE n X;
hme_root$1 {n:#} {X:Type} root:^(Hashmap n X) = HashmapE n X;

//

nothing$0 {X:Type} = Maybe X;
just$1 {X:Type} value:X = Maybe X;

anycast_info$_ depth:(#<= 30) { depth >= 1 }
   rewrite_pfx:(bits depth) = Anycast;

addr_std$10 anycast:(Maybe Anycast)
   workchain_id:int8 address:bits256  = MsgAddressInt;
_ _:MsgAddressInt = MsgAddress;

_ address:MsgAddress = Addr;

//

var_uint$_ {n:#} len:(#< n) value:(uint (len * 8))
         = VarUInteger n;
var_int$_ {n:#} len:(#< n) value:(int (len * 8))
        = VarInteger n;
nanograms$_ amount:(VarUInteger 16) = Grams;

_ grams:Grams = Coins;

//

extra_currencies$_ dict:(HashmapE 32 (VarUInteger 32))
                 = ExtraCurrencyCollection;
currencies$_ grams:Grams other:ExtraCurrencyCollection
           = CurrencyCollection;

//

tick_tock$_ tick:Bool tock:Bool = TickTock;

_ split_depth:(Maybe (## 5)) special:(Maybe TickTock)
  code:(Maybe ^Cell) data:(Maybe ^Cell)
  library:(Maybe ^Cell) = StateInit;

int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  src:MsgAddressInt dest:MsgAddressInt
  value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
  created_lt:uint64 created_at:uint32 = CommonMsgInfo;

message$_ {X:Type} info:CommonMsgInfo
  init:(Maybe (Either StateInit ^StateInit))
  body:(Either X ^X) = Message X;

_ (Message Any) = MessageAny;

//

storage#_ owner_address:MsgAddress validator_address:MsgAddress = Storage;

// owner ops
withdraw#1000 query_id:uint64 amount:Coins = InternalMsgBody;
change_validator_address#1001 query_id:uint64 new_validator_address:MsgAddress = InternalMsgBody;
send_raw_msg#7702 query_id:uint64 mode:uint8 msg:^MessageAny = InternalMsgBody;
upgrade#9903 query_id:uint64 code:^Cell = InternalMsgBody;

// elector ops
new_stakedata#_ validator_pubkey:bits256 stake_at:uint32 max_factor:uint32 andl_addr:bits256 signature:^bits512 = NewStakeData;

// 2 opcodes respond for 2 InternalMsgBody schemes
// so to avoid errors - here is OutMsgBody
new_stake_to_validator#4e73744b query_id:uint64 stake_data:NewStakeData = OutMsgBody;
new_stake#4e73744b query_id:uint64 stake_amount:Coins new_stake_msg:NewStakeData = InternalMsgBody;
recover_stake#47657424 query_id:uint64 = InternalMsgBody;
